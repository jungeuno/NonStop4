#####################################################################################################
				자주 사용하는 git 명령어 정리
#####################################################################################################
# 해당 프로젝트 히스토리를 전부 받아온다 (복제), 제일 처음에만 적용하면 된다.
git clone https://github.com/해당 깃허브 소유자 아이디/레퍼지토리 이름

git status		// 현재 저장소 내 파일들의 상태를 확인할 수 있음
git pull		// git 서버에서 최신 내용를 받아옴 (다른 사람이 작업한 내용을 가져옴)
	< 주의사항 : 작업을 하기 전에 반드시 git pull 작업을 해야한다. 그러지 않으면 다른 사람들이 작업한 내용과 충돌하게 된다!! >
git add .		// 로컬 저장소에서 추가 및 변경된 파일 전부를 한번에 인덱스에 기록함
git commit -m "string"	// 변경사항을 확정함. 아래는 예시
			(git commit -m "22.xx.xx_Choi")
			(git commit -m "22.xx.xx_Update_filename")
			(git commit -m "22.xx.xx_YH")

git push		// 로컬저장소(개인 PC)에 적용한 내용을 원격저장소(GitHub)에 적용함.

---------------------------------------------------------------------------------------------------------------------------------------------------
# clone 이후 순서

1. git pull			// 원격저장소의 최신 내용을 받아옴(새로고침)
2. git status		// 현재 자신의 로컬저장소 내 파일들의 상태를 확인
3. git add .		// 자신의 로컬저장소에서 추가 및 변경된 내용들을 전부 인덱스에 기록 (. 은 현재 경로를 말함)
4. git status		// 현재 자신의 로컬저장소 내 파일들의 상태를 확인
5. git commit -m "string"	// 변경사항을 확정함. "string" 대신 상단의 양식대로 기록
6. git push		// 자신의 로컬저장소에 적용한 내용을 원격저장소(github)에 적용함

7. github 프로젝트에 본인이 한 작업이 성공적으로 저장 및 등록이 되었는지 확인하기(중요!!)
